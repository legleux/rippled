name: dependencies
inputs:
  compiler:
    required: true
  compiler_version:
    required: true
  configuration:
    required: true
# An implicit input is the environment variable `build_dir`.
runs:
  using: composite
  steps:
    - name: export custom recipes
      shell: bash
      run: |
        conan export --version 1.1.10 external/snappy
        conan export --version 9.7.3 external/rocksdb
        conan export --version 4.0.3 external/soci
        conan export --version 2.0.8 external/nudb
    - name: add Ripple Conan remote
      shell: bash
      run: |
        conan remote list
        conan remote remove ripple || true
        # Do not quote the URL. An empty string will be accepted (with
        # a non-fatal warning), but a missing argument will not.
        conan remote add ripple --index 0 ${{ env.CONAN_URL }}
    - name: try to authenticate to Ripple Conan remote
      id: remote
      shell: bash
      run: |
        # `conan user` implicitly uses the environment variables
        # CONAN_LOGIN_USERNAME_<REMOTE> and CONAN_PASSWORD_<REMOTE>.
        # https://docs.conan.io/1/reference/commands/misc/user.html#using-environment-variables
        # https://docs.conan.io/1/reference/env_vars.html#conan-login-username-conan-login-username-remote-name
        # https://docs.conan.io/1/reference/env_vars.html#conan-password-conan-password-remote-name
        ## Don't try this yet...
        # echo outcome=$(conan user --remote ripple --password >&2 \
        #   && echo success || echo failure) | tee ${GITHUB_OUTPUT}
    - name: list missing binaries
      id: binaries
      shell: bash
      # Print the list of dependencies that would need to be built locally.
      # A non-empty list means we have "failed" to cache binaries remotely.
      run: |
        # echo missing=$(conan info . --build missing --settings build_type=${{ inputs.configuration }} --json 2>/dev/null  | grep '^\[') | tee ${GITHUB_OUTPUT}
    - name: install dependencies
      env:
        BUILD_TYPE: ${{ inputs.configuration }}
      shell: bash
      run: |
        set -x
        echo $PWD
        python3 <<EOF
        import shutil
        import subprocess
        from multiprocessing import cpu_count
        from pathlib import Path

        conanhome = subprocess.check_output(["conan", "config", "home"], text=True).strip()
        default_profile = Path("./conan_profile/default")
        if default_profile.is_file():
          print(f"conan default profile {default_profile} already exists ")
          with default_profile.open(encoding="utf-8") as f:
            default_profile = f.read()
          print(default_profile)
          sys.exit(0)

        with (Path(conanhome) / "global.conf").open("a", encoding="utf-8") as f:
            n = cpu_count()
            f.write("tools.build:verbosity = verbose\n")
            f.write(f"tools.build:jobs = {n}\n")
            f.write(f"core.download:parallel = {n}\n")
            f.write(f"core.upload:parallel = {n}\n")

        # Install the default profile
        profile_path = Path(conanhome) / "profiles/default"
        profile_path.parent.mkdir(parents=True, exist_ok=True)
        shutil.copy(default_profile, profile_path)
        EOF

        conan install . \
          --output-folder "${build_dir}" \
          --settings build_type="${BUILD_TYPE}" \
          --build missing
