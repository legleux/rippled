name: Build Docker images

on:
  push:
    branches:
      - cpack-squash
env:
  IMAGE_NAME: rippled
  REGISTRY: ghcr.io
  REPO: ${{ github.repository }}

jobs:
  build_image:
    strategy:
      fail-fast: false
      matrix:
        config:
          - os: os_1
            arch: amd64
            tag: X64
            # tag: ubuntu-latest
          # - os: os_2
          #   arch: arm64
          #   # tag: ARM64
          #   tag: ubuntu-24.04
    outputs:
      image: ${{ steps.build_image.outputs.image }}
      git_sha: ${{ steps.build_image.outputs.git_sha }}
    runs-on:
      - self-hosted
      - "${{ matrix.config.tag }}"
    # runs-on: [self-hosted, "${{ matrix.config.tag }}"]
    name: ${{ matrix.config.tag }} Docker image build
    steps:
      - name: check version
        run: |
          echo path: $PATH
          # bash -c /root/.nvm/nvm.sh
          echo "Got $?"
          # echo $PATH
          echo version: $(node --version)
          echo which node: $(which node)

      - name: checkout
        uses: actions/checkout@v4

      - name: check environment
        run: |
          echo "Building for config.tag: [${{ matrix.config.tag }}]" > tag_output.txt

      - name: Save tag_output
        uses: actions/upload-artifact@v4
        with:
          name: rippled-${{ matrix.config.tag }}
          path: tag_output.txt

      - name: Log in to the gchr
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build on ${{ matrix.config.os }}
        id: build_image
        run: |
          set -x
          # ${{ github.head_ref }}.${{ github.sha }}
          ARCH="${{ matrix.config.arch }}"
          git_sha=$(git rev-parse --short HEAD) && echo "git_sha=${git_sha}" >> "$GITHUB_OUTPUT"
          repo_name=${{ github.event.repository.name }}
          echo "The repo name is ${repo_name}"
          IMAGE="${{ env.REGISTRY }}/${{ env.REPO }}/${{ env.IMAGE_NAME }}:${git_sha}" && echo "image=${IMAGE}" >> "$GITHUB_OUTPUT"
          docker buildx build ./src  --build-arg PLATFORM="${ARCH}" --tag "${IMAGE}-${ARCH}" --push


  # create-multiarch-manifests:
  #     needs: build_image
  #     runs-on: ubuntu-latest
  #     steps:
  #       - name: Log in to the gchr
  #         uses: docker/login-action@v3
  #         with:
  #           registry: ${{ env.REGISTRY }}
  #           username: ${{ github.actor }}
  #           password: ${{ secrets.GITHUB_TOKEN }}
  #       - name: Create multiarch manifests
  #         run: |
  #           # TODO: check if both images are present. If only one is, just build with that one as we'd rather have
  #           # a single arch image rather than no images at all. (maybe specifically the amd64)
  #           set -x
  #           IMAGE_TAG=${{ needs.build_image.outputs.image }}
  #           git_sha=${{ needs.build_image.outputs.git_sha }}

  #           docker buildx imagetools create --tag ${IMAGE_TAG} \
  #                 ${IMAGE_TAG}-amd64 \
  #                 ${IMAGE_TAG}-arm64
