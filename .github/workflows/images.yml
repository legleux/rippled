name: Build Docker images

on:
  push:
    branches:
      - cpack-squash
env:
  IMAGE_NAME: rippled
  REGISTRY: ghcr.io
  REPO: ${{ github.repository }}

jobs:
  build_image:
    strategy:
      fail-fast: false
      matrix:
        config:
          - os: os_1
            arch: amd64
            tag: X64
          - os: os_2
            arch: arm64
            tag: ARM64
    outputs:
      image: ${{ steps.build_image.outputs.image }}
      git_sha: ${{ steps.build_image.outputs.git_sha }}
    runs-on:
      - self-hosted
      - "${{ matrix.config.tag }}"
    name: ${{ matrix.config.tag }} Docker image build
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Log in to the gchr
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build on ${{ matrix.config.os }}
        id: build_image
        run: |
          set -x
          . /etc/os-release
          cat /etc/os-release

          if [ "${{ matrix.config.tag }}" = "ARM64" ]; then
            docker --version
            docker buildx version
          else
            sudo apt-get update
            sudo apt-get install --yes ca-certificates curl
            sudo install -m 0755 -d /etc/apt/keyrings
            sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
            sudo chmod a+r /etc/apt/keyrings/docker.asc
            echo \
              "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
              $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
              sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update
            sudo apt-get update && sudo apt-get install --yes docker-buildx-plugin
          fi

          builder="builder"
          if ! docker buildx use ${builder} > /dev/null 2>&1; then
              cmd="docker buildx create --name ${builder} --driver=docker-container"
          fi
          $cmd
          docker buildx inspect ${builder}
          docker buildx use ${builder}
          set -x
          # ${{ github.head_ref }}.${{ github.sha }}
          ARCH="${{ matrix.config.arch }}"
          echo "ARCH is $ARCH"
          git_sha=$(git rev-parse --short HEAD) && echo "git_sha=${git_sha}" >> "$GITHUB_OUTPUT"
          repo_name=${{ github.event.repository.name }}
          echo "The repo name is ${repo_name}"
          IMAGE="${{ env.REGISTRY }}/${{ env.REPO }}/${{ env.IMAGE_NAME }}:${git_sha}" && echo "image=${IMAGE}" >> "$GITHUB_OUTPUT"
          echo "IMAGE is $IMAGE"
          ## TODO: Try to pass the image directly to the next stage without pushing to registry
          # docker buildx build . --builder=${builder} --output type=oci,dest=./${git_sha}-${ARCH}.tar
          docker buildx build .  --build-arg PLATFORM="${ARCH}" --tag "${IMAGE}-${ARCH}" --push

      - name: Save images
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.IMAGE_NAME }}-${{ github.sha }}-${{ matrix.config.arch }}
          path: |
            ./*.tar

  create-multiarch-manifests:
      needs: build_image
      runs-on: ubuntu-latest
      steps:
        - name: Log in to the gchr
          uses: docker/login-action@v3
          with:
            registry: ${{ env.REGISTRY }}
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}
        - name: Create multiarch manifests
          run: |
            # TODO: check if both images are present. If only one is, just build with that one as we'd rather have
            # a single arch image rather than no images at all. (maybe specifically the amd64)
            set -x
            IMAGE_TAG=${{ needs.build_image.outputs.image }}
            git_sha=${{ needs.build_image.outputs.git_sha }}
            echo "git_sha: $git_sha"

            cmd="docker buildx imagetools create --tag ${IMAGE_TAG}"
            tags=""
            for a in md rm; do
              docker manifest inspect ${IMAGE_TAG}-a${a}64 > /dev/null ;
              tag_exists=$?
              echo "${IMAGE_TAG}-a${a}64 exists --> tags_exists: [${tag_exists}]"
              tags+=" ${IMAGE_TAG}-a${a}64"
            done

            docker buildx imagetools create --tag ${IMAGE_TAG} \
                  ${tags}
