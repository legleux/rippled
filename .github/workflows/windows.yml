name: windows

on:
  pull_request:
  push:
    # If the branches list is ever changed, be sure to change it on all
    # build/test jobs (nix, macos, windows, instrumentation)
    branches:
      # Always build the package branches
      - develop
      - release
      - master
      # Branches that opt-in to running
      - 'ci/**'

# https://docs.github.com/en/actions/using-jobs/using-concurrency
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Visual Studio ${{ matrix.version.generator }}-${{ matrix.configuration.type }}
    strategy:
      fail-fast: false
      matrix:
        version:
          # - generator: Visual Studio 17 2022
          - generator: 17 2022
            runs-on: windows-2022
        configuration:
          - type: Release
            tests: true    # issuer_bytes = decode_classic_address(issuer)

          - type: Debug
            # Skip running unit tests on debug builds, because they
            # take an unreasonable amount of time
            tests: false
            runtime: static

    runs-on: ${{ matrix.version.runs-on }}
    env:
      build_dir: build
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: choose Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: learn Python cache directory
        id: pip-cache
        shell: bash
        run: |
          python -m pip install --upgrade pip
          echo "dir=$(pip cache dir)" | tee ${GITHUB_OUTPUT}

      - name: restore Python cache directory
        uses: actions/cache@v4
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-${{ hashFiles('.github/workflows/windows.yml') }}

      - name: install Conan
        run: pip install wheel conan~=2.17

      - name: check environment
        run: |
          dir env:
          $env:PATH -split ';'
          python --version
          conan --version
          cmake --version

      - name: configure Conan
        shell: bash
        run: |
          python <<EOF
          import shutil
          import subprocess
          import sys
          from multiprocessing import cpu_count
          from pathlib import Path

          conanhome = Path(subprocess.check_output(["conan", "config", "home"], text=True).strip())
          conan_profile_path = conanhome / "profiles" / "default"
          global_conf = conanhome / "global.conf"
          default_profile = Path.cwd() / "conan_profile" / "default"
          profile_cmd = ["conan", "profile", "show", "--profile:all", "default"]
          global_defaults = f"""
          tools.build:verbosity = verbose
          tools.build:jobs = {(n:=cpu_count())}
          core.download:parallel = {n}
          core.upload:parallel = {n}
          """

          if conan_profile_path.is_file():
              print(f"conan default profile {conan_profile_path} already exists!")
          else:
              conan_profile_path.parent.mkdir(parents=True, exist_ok=True)
              shutil.copy(default_profile, conan_profile_path)
              print(f"Copied {default_profile.resolve()} to {conan_profile_path.resolve()}")

          subprocess.run(profile_cmd)

          if "tools.build:verbosity" not in global_conf.read_text(encoding="utf-8"):
              with global_conf.open("a", encoding="utf-8") as f: f.write(global_defaults)
          EOF

          conan remote add ripple --index 0 http://18.143.149.228:8081/artifactory/api/conan/dev

      - name: build dependencies
        uses: ./.github/actions/dependencies
        env:
          CONAN_URL: http://18.143.149.228:8081/artifactory/api/conan/dev
          # CONAN_LOGIN_USERNAME_RIPPLE: ${{ secrets.CONAN_USERNAME }}
          # CONAN_PASSWORD_RIPPLE: ${{ secrets.CONAN_TOKEN }}
        with:
          configuration: ${{ matrix.configuration.type }}

      - name: build
        uses: ./.github/actions/build
        with:
          generator: 'Visual Studio ${{ matrix.version.generator }}'
          configuration: ${{ matrix.configuration.type }}
          # Hard code for now. Move to the matrix if varied options are needed
          # cmake-args: '-Dassert=TRUE -Dwerr=TRUE -Dreporting=OFF -Dunity=ON'
          cmake-args: '-Dxrpld=TRUE -Dtests=True -Dassert=TRUE -Dwerr=TRUE' # set in conanfile if ci/win?
          cmake-target: rippled

      - name: test
        shell: bash
        if: ${{ matrix.configuration.tests }}
        run: |
          ${build_dir}/${{ matrix.configuration.type }}/rippled --unittest \
              --unittest-jobs $(nproc)
