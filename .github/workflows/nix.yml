name: nix
on: [push, pull_request]

jobs:

  test:
    strategy:
      matrix:
        platform:
          - ubuntu
          - macos
        compiler:
          - name: gcc
            cxx: g++
            cxxflags:
            linkflags:
        generator:
          - Ninja
        configuration:
          - Release
    runs-on: ${{ matrix.platform }}-latest
    env:
      build_dir: .build
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: install Ninja on Linux
        if: matrix.generator == 'Ninja' && runner.os == 'Linux'
        run: sudo apt install ninja-build
      - name: install Ninja on OSX
        if: matrix.generator == 'Ninja' && runner.os == 'macOS'
        run: brew install ninja
      - name: install nproc on OSX
        if: runner.os == 'macOS'
        run: brew install coreutils
      - name: choose Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.9
      - name: learn Python cache directory
        id: pip-cache
        run: |
          sudo pip install --upgrade pip
          echo "::set-output name=dir::$(pip cache dir)"
      - name: restore Python cache directory
        uses: actions/cache@v2
        with:
            path: ${{ steps.pip-cache.outputs.dir }}
            key: ${{ runner.os }}-${{ hashFiles('.github/workflows/nix.yml') }}
      - name: install Conan
        run: pip install wheel conan
      - name: learn Conan cache directory
        id: conan-cache
        run: |
          echo "::set-output name=dir::$(conan config get storage.path)"
      - name: restore Conan cache directory
        uses: actions/cache@v2
        with:
            path: ${{ steps.conan-cache.outputs.dir }}
            key: ${{ runner.os }}-${{ hashFiles('conanfile.txt') }}
      - name: configure Conan
        if: runner.os == 'Linux'
        run: |
          conan profile new default --detect
          conan profile update settings.compiler.libcxx=libstdc++11 default
      - name: export RocksDB
        working-directory: external
        run: conan export rocksdb.py
      - name: install dependencies
        run: |
          mkdir ${build_dir}
          cd ${build_dir}
          conan install .. --build missing
      - name: configure
        run: |
          cd ${build_dir}
          cmake \
            -G ${{ matrix.generator }} \
            -DCMAKE_MODULE_PATH="$(pwd)" \
            -DCMAKE_C_COMPILER=${{ matrix.compiler.name }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.compiler.cxx }} \
            -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} \
            -Dassert=ON \
            -Dcoverage=OFF \
            -Dreporting=OFF \
            -Dunity=OFF \
            ..
      - name: build
        run: cmake --build ${build_dir} --target rippled --parallel $(nproc)
      - name: test
        run: ${build_dir}/rippled --unittest --unittest-jobs $(nproc)
